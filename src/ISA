VC is a 16 or 32-bit architecture, it's essentially a RISCV C subset only - so 16-bit
largely 2-address instructions.

## Registers

Most of the ISA operates on 8 GP registers, none are special in any way:

	- 0 s0
	- 1 s1
	- 2 a0
	- 3 a1
	- 4 a2
	- 5 a3
	- 6 a4
	- 7 fp

Some instructions operate on 16 registers:


	- 0 0 - returns - 0 value, writes are ignored
	- 1 lr - link register (15 bits bit 0 always 0)
	- 2 sp - stack pointer (15 bits bit 0 always 0)
	- 3 epc - exception PC (15 bits PC, bit 0 previous kernel mode) *
	- 4 csr - status register *
	- 5 mmu - mmu access register *
	- 6 stmp - kernel mode tmp *
	- 7 mulhi - multiply/divide extension (also used for constant extension)
	- 8 s0
	- 9 s1
	- 10 a0
	- 11 a1
	- 12 a2
	- 13 a3
	- 14 a4
	- 15 fp

* - kernel mode only register - causes invalid instruction trap in user mode

## Constant extensions

Some instructions support constant extensions - if the previous instruction is a lui to mulhi then the
constant in the subsequent instruction is extended with the 8 upper bits from the mulhi register. There
are 3 variants (depending on the size of the original constant):

CX0 - on an extended instruction only the 8 LSBs of the original constant is used, the rest are ignored.
      The upper 8 bits come from mulhi.
CX1 - on an extended instruction only the 5 LSBs of the original constant is used.
      The bits 12:5 bits come from mulhi. The upper 3 bits are 000.
CX2 - on an extended instruction only the 6 LSBs of the original constant is used (bit 0 of that may be 0),
      The bits 13:6 bits come from mulhi. The upper 2 bits are 00.

Note: CX1/2 load/store offsets (registers other than FP) are normally signed - so we support small negative offsets and (extended) karge oositive ones.

The assembler will automatically extend instructions if you use large constants

The CSR has 2 bits that make the pending constant extension state safe across interrupts/traps

## Instructions

General formats:

ooooodddsssccccc
ooooodddcccccccc
ooooodddsssooooo

Constants that are multiple of 2 are (numbers are bits)
AAAAAA986543210x
777777776543210x
444444444443210X
Constants that are multiple of 1 are
7777777775432106
4444444444442103



rd - destination register (one of the 8)
rs - source register (one of the 8)
rs2 - 2nd source register (one of the 8)
rr - destination register (one of the 16)
RR - source register (one of the 16)
cccc - constant (details vary to make decoding easy)

11111 100 000 00000
54321 098 765 43210

00000 ddd ccc ccccc - add	rd, sp, ccccccc0 				CX0
00001 ddd ccc ccccc - lw	rd, cccccccc0(fp)	addr sign extended	CX0
00010 ddd sss ccccc - lw	rd, ccccc0(rs)		addr sign extended	CX2
00011 ddd sss ccccc - lb	rd, ccccc(rs)		addr sign extended	CX1

00100 222 ccc ccccc - sw	rs2, cccccccc0(0)	addr sign extended	CX0
00101 222 ccc ccccc - sw	rs2, cccccccc0(fp)	addr sign extended	CX0
00110 222 sss ccccc - sw	rs2, ccccc0(rs)		addr sign extended	CX2
00111 222 sss ccccc - sb	rs2, ccccc(rs)		addr sign extended	CX1

01000 ddd ccc ccccc - add	rd, cccccccc					CX0
01001 ccc ccc ccccc - jal	lr, cccccccc0(pc)				CX0
01010 ddd ccc ccccc - li	rd, cccccccc
01011 rrr rcc ccccc - lui	rr, 0cccccccc00000000

01100 ddd sss 00000 - srl	rd, rd, rs
01100 ddd ccc c1000 - srl	rd, rd, cccc
01100 ddd sss 00001 - sra	rd, rd, rs
01100 ddd ccc c1001 - sra	rd, rd, ccccc
01100 ddd ccc ccc10 - and	rd, rd, cccccc					CX2
01100 ddd rrr r0011 - sub	rd, rd, RR		
01100 ddd sss 00111 - or	rd, rd, rs
01100 ddd sss 10111 - and	rd, rd, rs
01100 ddd rrr r1011 - subc	rd, rd, RR	add/sub with carry 	0/1
01100 ddd rrr r1111 - addc	rd, rd, RR	carry goes to mulhi	0/-1
01101 ccc ccc ccccc - j		ccccccccccc0(pc)				CX0
01110 sss ccc ccccc - beqz	rs, ccccccc0(pc)				CX0
01111 sss ccc ccccc - bnez	rs, ccccccc0(pc)				CX0

10000 ddd ccc ccccc - lw	rd, cccccccc0(0)	addr sign extended	CX0
10001 RRR ccc ccccc - addi	RX, ccccc					CX0
10010 rrr rcc ccccc - lw	RR, ccccccc0(sp)	addr 0 extended		CX0
10011 ddd ccc ccccc - lb	rd, cccccccc(0)		addr sign extended	CX0

10100 RRR R00 00000 - jr	(RR)   (jr (epc) is return from exception)
10100 RRR R00 10000 - jalr	lr, (RR)   
10100 rrr RRR Rr001 - mv	rr, RR
10100 rrr RRR Rr010 - add	rr, RR
10100 000 0bb bb011 - invmmu	bbbb *    invalidates mmu mappings 

10101 222 ccc ccccc - sb	rs2, cccccccc(fp)	addr sign extended	CX0
10110 RRR Rcc ccccc - sw	RR, ccccccc0(sp)	addr 0 extended		CX0
10111 222 ccc ccccc - sb	rs2, cccccccc(0)	addr sign extended	CX0

11000 free
11001 222 sss ccccc - stio	rs, ccccc0(rs2) *
11010 ddd sss ccccc - ldio	rd, ccccc0(rs) *
11011 rrr rcc ccccc - lui	rr, 1ccccccc00000000 
11100 ddd sss 00000 - sll	rd, rd, rs
11100 ddd ccc c1000 - sll	rd, rd, ccccc
11100 ddd sss 00001 - xor	rd, rd, rs
11100 ddd ccc c1001 - xor	rd, cccc
11100 ddd ccc ccc10 - or	rd, cccccc					CX2
11100 ddd sss 00011 - mul	rd, rd, rs		(hi result in multhi)
11100 ddd sss 00111 - div	rd, rd, rs		(remainder in multhi)
11100 ddd sss 01011 - addb	rd, rd, rs		
11100 ddd sss 01111 - addbu	rd, rd, rs		
11100 ddd sss 10011 - swap	rd, rs			byte swap rs into rd
11100 ddd 000 10111 - add	rd, rd, pc
11100 ddd 001 10111 - sext	rd	
11100 ddd 010 10111 - zext	rd
11100 ddd 011 10111 - inv	rd
11100 ddd 100 10111 - neg	rd
11100 sss 101 10111 - flushw    (rs) *		flush write cache to mem
11100 sss 110 10111 - sub	sp, rs
11100 0xx 111 10111 - trap      (invalid instructions   ....0111 is breakpoint)
11100 100 111 10111 - syscall
11100 101 111 10111 - swapsp
11100 0bb 111 11011 - flushall  bb *    flushes I and/or D cache (without writeback)

11101 ddd ccc ccccc - lb	rd, cccccccc(fp)	addr sign extended	CX0
11110 sss ccc ccccc - bltz	rs, ccccccc0(pc)				CX0
11111 sss ccc ccccc - bgez	rs, ccccccc0(pc)				CX0

Instructions marked '*' trap when executed in user mode

The assembler creates some pseudo instructions to allow arbitrary distance branches and calls (that will
survive the linker) as well as the missing branches - some of these instructions may use the link (lr)
register as a temporary (there are 's' varients to some of them that will not do that and force the use of
the underlying instructions):

* j (js)
* jal (jals)
* beqz (beqzs)
* bnez (bnezs)
* bgez (bgezs)
* bltz (bltzs)
* blez 
* bgtz 

The assembler runs relaxation passes to reduce the size of branches as much as possible

Compilers solve register pressure issues by spilling temporaries onto the stack, however we have small
ld/st offsets (even for r7) this creates chicken/egg problems if we have to use an extra register
to save every register - we have a special mode where if you:

- do a lui to mulhi, and immediately
- do a sb7/sw7/lb7/lw7 
- then the upper 8 bits of the immediate offset come from the upper 8 bits of mulhi


## Kernel mode

As mentioned above kernel mode has some registers which cause traps when accessed:

* EPC - exception PC
* STMP - kernel temporary
* CSR
* MMU

The EPC register has thge PC at the point of the last exception, bit 0 is the Kernel/User state prior to the exception.

The CSR contains various CPU state bits:

* 7 user_io - if set usermode can use the stio/ldio instructions (mostly intended for system test)
* 6 prev_lui -  prev lui to  mulhi 
* 5 lui      - lui to  mulhi just done in previous instruction
* 4 mmu D proxy - in kernel mode load and store instructions use the user mode MMU page mappings (and trap accordingly) - is cleared when an MMU trap occurs
* 3 mmu enable - turns on the MMU
* 2 kernel mode - (read only, changed by jr (epc)) kernel (1)/user (0) mode
* 1 previous IE - previous IE
* 0 IE - interrupt enable

At reset all bits are 0 except for the kernel mode bit.

There are 5 exception vectors in low (MMU mapped if on) kernel space:

* 0x0000 - reset
* 0x0004 - trap (anything other than the next 3 traps)
* 0x0008 - interrupt
* 0x000C - syscall (the syscall instruction)
* 0x0010 - MMU trap

What an exception (other than reset) occurs the following happen:

* The current PC (or next PC if it's an interrupt) is copied to EPC
* bit 0 of EPC is set from CSR bit 2 (kernel/user)
* CSR bit 2 (kernel/user) is set to 1 (kernel)
* CSR bit 1 (previous IE) is set from CSR bit 0 (IE)
* CSR bit 0 (IE) is set to 0
* PC is set to the vector address epending on the exception type

Exception return is initiated by executing the jr (epc) instruction, it essentially undoes the above process:

* CSR bit 0 (IE) is set from CSR bit 1 (previous IE)
* CSR bit 2 (kernel/user) is set from EPC bit 0
* the PC is set from EPC

VC is a RISC machine, when switching to kernel mode the CPU must save registers/etc before use, there is
a special temporary register stmp that is intended to be the kernel stack pointer, on taking a trap the
kernel trap handler can execute the swapsp instruction which will switch the current SP and the stmp
registers, this will only happen if the previous mode was user mode (this way interrupts or MMU traps
from kernel mode don't switch stacks). stmp is protected from user mode.

A typical kernel trap handler that wants to execute C code
might look like:

* swapsp
* sub	sp, 26
* sw	epc, (sp)
* sw 	stmp, 2(sp)
* sw 	a0, 4(sp)
* ,,,,
* sw 	s1, 18(sp)
* sw 	lr, 20(sp)
* sw 	mulhi, 22(sp)
* sw 	csr, 24(sp)
* jal	c_code
* lw	csr, 24(sp)
* lw	epc, (sp)
* lw 	stmp, 2(sp)
* lw 	a0, 4(sp)
* ,,,,
* lw 	s1, 18(sp)
* lw 	lr, 20(sp)
* lw 	mulhi, 22(sp)
* add	sp, 26
* swapsp
* jr	(epc)

Care must be taken not to use an extended constant before mulhi is saved (or after it is recovered).

## Memory address spaces

There are two memory address spaces - qspi RAM/ROM, and I/O space. qspi is accesses by instruction fetch and
lw/lb/sw/sb instructions through the MMU, I/O space is accessed from kernel mode only using the stio/ldio
instructions and is not MMU mapped. 

I/O space is separated into the following:

* 0x00-0x0f - QSPI
* 0x20-0x2f - UART
* 0x40-0x4f - Interrupt controller
* 0x50-0x5f - counter/timer
* 0x80-0x9f - GPIO
* 0xc0-0xff - SPI

Actual IO accesses are always to even addresses (the LSB of addresses is ignored)

The qspi controller supports up to 3 external qspi devices (0, 1 and 2) device 1 is the device boot code is
fetched from at reset and is assumed to be a ROM. The controller runs in 4 modes:

* 0 - device 0 is used for accesses 0-8Mb and device 2 for accesses to 8Mb to 16Mb
* 1 - device 0 is used for accesses 0-8Mb
* 2 - device 0 is used for accesses 0-16Mb
* 3 - device 0 is used for write accesses 0-8Mb device 1 is used for read accesses 0-8Mb

Mode 3 is the default at reset, device 2's CS needs to be set up in the GPIO controller before use.

The QSPI controller has 4 registers:

* 0x00 device 0
** bit 7 - set if a mask must be sent
** bit 6 - set if the device supports fast quad mode
** bit 4:0 - read delay
* 0x02 device 1
** bit 7 - set if a mask must be sent
** bit 6 - set if the device supports fast quad mode
** bit 4:0 - read delay
* 0x04 device 2
** bit 7 - set if a mask must be sent
** bit 6 - set if the device supports fast quad mode
** bit 4:0 - read delay
* 0x06 - bits 1:0 the mode as described above

## MMU

MMU accesses are for instruction accesses and ld/st instruction accesses. The MMU is turned on when the "mmu enable" bit in the CSR is set. The MMU maps a 16-bit virtual address to a 24 bit physical address. It is
structured very much like a PDP split I/D address space MMU (or a 'Sun style' SRAM mmu). Essentialy there
are 4 sets of MMU mapping tables - each table splits its virtual address space into 16 4k pages. There are
two address spaces each for Kernel mode (instruction and data) and two for User mode (again instruction
and data).

This means that the kernel and a running user mode process can access up to 128k, 64k each of instruction
and data (just like PDP11 split I/D space).

There is a kernel access only 'mmu' register for accessing the MMU. Writes to an MMU entry can be
performed by first writing to a virtual fault register and then writing the physical mapping data for that
virtual address - which of these two is written to is determined by bit 0 of values written to the
mmu register:

Virtual address write:

* bits 15-12 -  upper bits virtual fault address (bits 15:12)
* bit  3 - fault is instruction space
* bit  2 - fault is kernel space
* bit  0 - 0

Physical address:

* bits 15-4 -  upper bits virtual fault address (bits 23:12)
* bit  2 - 1 if mapping is writeable, 0 if read only (ignored for instruction spaces)
* bit  1 - 1 if mapping is valid, 0 if invalid (if invalid all other bits are ignored)
* bit  0 - 1

Reads from the MMU register read the Virtual address mapping register, which is set when an
MMU  exception occurs (which means that your don't always need to set it when responding to a MMU fault). It provides an aditional bit telling you why the trap happened.

Virtual address read:

* bits 15-12 -  upper bits virtual fault address (bits 15:12)
* bit  3 - fault is instruction space
* bit  2 - fault is kernel space
* bit  1 - 1 if it's a valid bit, 0 if it's a write to read only page fault
* bit  0 - 0

There is an invmmu kernel mode only instruction that will invalidate one or more of the 4 mapping
tables. It takes a 4 bit encoded argument: 3:ki 2:kd 1:ui 0:ud.

## Interrupts

There is a single CPU level interrupt it is enabled with bit 0 of the CSR, bit 1 has the previous mode which is set on traps and copied back to bit 0 on exception return. 

The interrupt controller feeds the interrupt pending signal that is masked by csr.IE.

There are 6 interrupt sources, each appears as a bit in the interrupt controller registers:

* bit 5 - SPI
* bit 4 - GPIO
* bit 3 - SWI
* bit 2 - TIMER
* bit 1 - CLOCK
* bit 0 - UART

There are 3 readable registers in the interrupt controller:

* 0x40 PENDING - shows the 6 pending interrupts (this is the logical and of the STATUS and ENABLE registers, the logical or of these bits feeds the CPU interrupt)
* 0x42 STATUS - shows actual interrupts that are active
* 0x44 ENABLE - 6 bits that enable corresponding interrupts

The ENABLE register can also be written at address 0x42, 3 bits in the STATUS register can also be changed
(SWI, TIMER CLOCK), the other bits are set/cleared in their corresponding IO units. These are NOT 
set/cleared at address 0x42 - instead when you write to 0x48 bits with 1 are set, those with 0 don't change.
When you write to 0x4A bits with 1 are cleared, those with 0 don't change.

## Timer/Counter

There is 32 bit clock and a 24-bit timer:

0x50 - writes the low 16 bits of the clock counter
0x52 - writes the uppper 16 bits of the clock counter and sets the lower 16 bits to 0
0x54 - writes the low 16 bits of the clock compare register
0x56 - writes the uppper 16 bits of the clock compare register
0x5C - writes the low 16 bits of the timer counter reload register
0x5E - writes the upper 8 bits of the timer counter reload register and then copies the entire reload register to the timer counter register.

The timer always counts down, it's reloaded from the timer counter reload register when that register is
loaded and when the timer counter reaches 0, when the counter reaches 0 the timer interrupt status bit is set in the interrupt controller.

The clock counts up from where it's set by register writes, it wraps around to 0 and keeps counting. There is
a clock comparator register, when the comparator register and the clock register match the clock bit in the
clock bit in the interupt status register is set.

## GPIOs

The current TT chip has 8 inputs (in[7:0]), 8 outputs (out[7:0]), and 8 IO pins (io[7:0). Some of these pins
are hardwired for qspi (out[2:0], io[3:0]) the rest can be mapped to any of the internal devices, or used as general I/O pins.

Each out[7:2] or io[7:4] can be driven from one of 10 sources described by a 4 bit number:

* 0 - GPIO
* 1 - uart TX
* 2 - spi_mosi[0]
* 3 - spi_mosi[1]
* 4 - spi_clk[0]
* 5 - spi_clk[12]
* 6 - spi_cs[0]
* 7 - spi_cs[1]
* 8 - spi_cs[2]
* 11 - qspi_cs[2]

Each internal device input (uart_rx, spi_miso[1:0]) can be mapped to in[7:0] or io[7:4] (uart can't be
mapped to io[7:4])i with a 3/4 bit number. 

* 0-7 - in[X]
* 12-15 i io[X]

GPIO registers:

* 0x80 7:0 - pending interrupts from in[7:0]
* 0x82 7:4 - pending interrupts from io[7:4]
* 0x84 7:0 - current status for in[7:0]
* 0x86 7:4 - current status for io[7:4]
* 0x88 7:0 - interrupt enable for in[7:0] (0 at reset_
* 0x8A 7:4 - interrupt enable for io[7:4] (0 at reset)
* 0x90 7:0 - gpio output data for out[7:0]
* 0x92 7:4 - gpio output data for io[7:4]
* 0x94 7:4 - gpio direction for io[7:4] (1 means out, 0 at reset)
* 0x96 7:0 - 7:4 input source spi_miso[1], 3:0 input source spi_miso[0]
* 0x98 2:0 - 2:0 input source uart_rx  (0 at reset)
* 0xA2 7:4 - 7:4 source for out[3]
* 0xA4 7:0 - 7:4 source for out[5], 3:0 source for out[4]
* 0xA6 7:0 - 7:4 source for out[7], 3:0 source for out[6] (default 1 for 3:0)
* 0xAC 7:0 - 7:4 source for io[5], 3:0 source for io[4]
* 0xAE 7:0 - 7:4 source for io[7], 3:0 source for io[7]

Interrupts are level sensitive, active high only. The Interrupt signal to the interruopt controller
is the logical or of all the bits in the 2 pending registers. The pending registers are the logical
and of the corresponding bits in the 2 enable registers and the in/io pins.

## UART

The UART is very simple, only supports 8 bits no parity - baud rate is set by a 12-bit register - the baud
rate is the value of the system clock (50MHz) divided by 4 times the register value.

UART registers are:

* 0x10 - read only, input receive buffer, if the receive interrupt bit is set it will be cleared on read
* 0x12 - write only, output transmit buffer, if the transmit interrupt bit is set it will be cleared on write
* 0x14 - bit 1 receive interrupt pending, bit 0 transmit interrupt pending (both bits 0 at reset) when this register is written 0 bits are ignored, 1 bits clear the pending bit)
* 0x16 - bit 1 RX invert, bit 0 TX invert (both bits 0 at reset)
* 0x18 - 8 lower bits of baud counter
* 0x1A - 4 upper bits of baud counter

## SPI

There is a single SPI controller, it can talk up to 3 SPI devices (3 CS pins) on 1 or 2 SPI buses
(1 or 2 CLK/MISO/MOSI pairs).

There are 3 register sets for the 3 devices are at 0xC0/0xD0/0xE0:

* 0xC0 - writes start sending a byte (8 bits) and drop CS, reads return the last read data and raise CS
* 0xC2 - writes start sending data (8+ bits) and put the spi controller into SD searching mode, reads return the latest data read and leaves CS low
* 0xC4 - bit 0 device ready - set when a byte has been sent, cleared when another is sent or CS rises (reset to 0)
* 0xC6 - bit 0 interrupt - set when a byte has been sent, cleared when another is sent or CS rises (reset to 0)
* 0xC8 - bits 1:0 SPI mode (clock/data timing/etc), bit 2 SRC (which miso/mosi pair
* 0xCA - bits 7:0 clock speed - this is the number of CPU clocks (-1) foir each phase of the SPI clock
* 0XCE - bits 7:0 (shared between all devices) searching mode timeout in units of 8 clocks

The way to use this unit is to send command data to 0xC0 (0xD0/0xE0) CS will go down and 8 bits will be sent
wait until the ready bit is set and then send another byte by writing to the same address (repeat if required), or read from that
address to stop the transaction and raise CS. To do a read transaction start sending commands to 0xC0/etc 
when the time comes to read send 0xff to trigger 8 clocks, wait for the ready flag then read from 0xC2, or
if it's the last read byte read from 0xC0.

There is some special modes for SD cards - if you perform a transaction to 0xF0 (writing only 0xFFs) it will use
the clock timing/etc for device 0 (0xC0) but not drop any CS - this can be used to send an SD Card SPI mode
reset. There is also a 'searching mode (triggered by writing 0xFF to 0xC2/etc) this will put the device 
into searching, it will find a non-byte aligned response and stop when bit 7 of the in register receives 
it's first 0 bit. Subsequent transactions will be byte aligned with that last one.

The 3 SPI devices share the same statemachine, only one device can be active at a time, you must raise
CS on one device before using another device (including 0xF0).


